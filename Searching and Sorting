#include <iostream>
#include <vector>
using namespace std;

                                                                                // FIRST OCCURANCE

/*
int first (vector <int> v, int key){
  int s=0; 
  int e=v.size()-1;
  int ans =-1;
  while (s <= e){
   int mid = s + (e-s)/2;
    if (v[mid]==key){
      ans=mid;
      e=mid-1;
    }
    else if (key < v[mid]){
      e=mid-1;
    }
    else if (key > v[mid]){
      s = mid +1;
    }
  }
  return ans;
}
int main() {
  vector <int> v {1, 2, 3 , 4 , 4, 4 , 4 ,5 , 6 };
  int key = 4;
  int ans = first (v, key);
  cout<<" ans is "<<ans<<endl;
  return 0;
}
*/


                                                                                        // LAST OCCURANCE
/*
int last (vector <int> v, int key) {
  int s=0; 
  int e= v.size() -1;
  int ans =-1;
  while (s<=e){
    int mid= s + (e-s)/2;
    if ( v[mid]==key ) {
      ans = mid;
      s=mid+1;
    }
    else if ( key < v[mid]) {
      e=mid-1;
    }
    else if (key > v[mid]){
      s = mid +1;
    }
  }

  return ans;
}
int main () {
  vector <int> v { 1, 2, 3 , 4 , 4, 4 , 4 ,5 , 6};
  int key = 4;
  int ans = last (v, key);
  cout<<" ans is "<<ans<<endl;
  return 0;
}
*/
                                                                              // TOTAL NUMBER OF OCCURANCE 

// DO IT AGAIN
/*
int last (vector <int> v, int key) {
  int s=0; 
  int e= v.size() -1;
  int ans =0;
  while (s<=e){
    int mid= s + (e-s)/2;
    if ( v[mid]==key ) {
      ans++;
      s=mid+1;
    }
    else if ( key < v[mid]) {
      e=mid-1;
      ans++;
    }
    else if (key > v[mid]){
      s = mid +1;
      ans++;
    }
  }

  return ans;
}
int main () {
  vector <int> v { 1, 2, 3 , 4 , 4, 4 , 4 ,5 , 6};
  int key = 4;
  int ans = last (v, key);
  cout<<" ans is "<<ans<<endl;
  return 0;
}

*/


                                                                        // PEAK ELEMENT IN A MOUNTAINED ARRAY

int peak (vector <int> v) {
  int s=0;
  int e= v.size()-1;
  while ( s< e){
    int mid = s + ( e-s )/2;
    if (v[mid]<v[mid+1]) {
      s=mid+1;
    }
    else {
      e=mid;
    }
  }
  return s;
}
int main () {
  vector <int> v{1, 5 , 6 , 10, 3};
  int ans = peak(v);
  cout<<" index is : "<< ans << endl;
  return 0;
}
